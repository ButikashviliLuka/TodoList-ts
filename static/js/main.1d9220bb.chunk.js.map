{"version":3,"sources":["Components/ListItem.tsx","Components/TodoListInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","list","dispatch","className","map","item","title","onClick","type","payload","id","TodoListInput","useState","inputValue","setInputValue","onSubmit","e","preventDefault","v4","addItem","autoFocus","placeholder","value","onChange","target","ACTIONS","UpdateList","state","action","filter","App","useReducer","Object","keys","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAyBeA,G,MAjBuB,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC1C,OACI,qBAAKC,UAAU,iBAAf,SACKF,EAAKG,KAAI,SAACC,GACP,OACI,qBAAmBF,UAAU,qBAA7B,SACI,gCACI,6BAAKE,EAAKC,QACV,oBAAIC,QAAS,kBAAML,EAAS,CAACM,KAAM,SAAUC,QAAS,CAAEH,MAAOD,EAAKC,MAAOI,GAAIL,EAAKK,OAApF,wBAHEL,EAAKK,W,QCYpBC,EAjBiC,SAAC,GAAgB,IAAfT,EAAc,EAAdA,SAAc,EACxBU,mBAAiB,IADO,mBACrDC,EADqD,KACzCC,EADyC,KAS5D,OACI,mCACI,sBAAMX,UAAU,GAAGY,SAAU,SAAAC,GAAC,OATtB,SAACA,GACbA,EAAEC,iBACCJ,IACCX,EAAS,CAACM,KAAM,MAAOC,QAAS,CAAEH,MAAOO,EAAYH,GAAIQ,iBACzDJ,EAAc,KAKoBK,CAAQH,IAA1C,SACI,uBAAOI,WAAS,EAACZ,KAAK,OAAOa,YAAY,iBAAiBC,MAAOT,EAAYU,SAAU,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,eCP7HG,EACC,MADDA,EAEI,SAFJA,EAGE,OAEFC,EAAa,SAACC,EAAeC,GACjC,OAAQA,EAAOpB,MACb,KAAKiB,EACH,MAAM,GAAN,mBAAWE,GAAX,CAAkB,CAACrB,MAAOsB,EAAOnB,QAAQH,MAAOI,GAAIkB,EAAOnB,QAAQC,MACrE,KAAKe,EACH,OAAOE,EAAME,QAAO,SAACxB,GAAD,OAAUuB,EAAOnB,QAAQC,KAAOL,EAAKK,MAC3D,KAAKe,EAEL,QACE,OAAOE,IAaEG,EAVH,WAAO,IAAD,EACSC,qBAAWL,EAAY,IADhC,mBACTzB,EADS,KACHC,EADG,KAEhB,OACE,qCACE,cAAC,EAAD,CAAeA,SAAUA,IACxB8B,OAAOC,KAAKhC,GAAMiC,OAAS,cAAC,EAAD,CAAUjC,KAAMA,EAAMC,SAAUA,IAAe,sDCrBlEiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1d9220bb.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Action, Data} from '../App'\r\n\r\ninterface InputType  {\r\n    list:  Data[]\r\n    dispatch: React.Dispatch<Action>\r\n}\r\n\r\nconst ListItem: React.FC<InputType> = ({list, dispatch}) => {\r\n    return(\r\n        <div className=\"list-container\">\r\n            {list.map((item) => {\r\n                return(\r\n                    <div key={item.id} className=\"list-item-main-div\">\r\n                        <div>\r\n                            <h1>{item.title}</h1>\r\n                            <h3 onClick={() => dispatch({type: \"remove\", payload: { title: item.title, id: item.id }})}>Remove</h3>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem","import React, {useState} from 'react'\r\nimport {v4} from 'uuid'\r\nimport { Action } from '../App';\r\n\r\ninterface IInputFunction {\r\n    dispatch: React.Dispatch<Action>\r\n}\r\n\r\nconst TodoListInput: React.FC<IInputFunction> = ({dispatch}) => {\r\n    const [inputValue, setInputValue] = useState<string>(\"\");\r\n    const addItem = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if(inputValue) {\r\n            dispatch({type: \"add\", payload: { title: inputValue, id: v4() }});\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n            <form className=\"\" onSubmit={e => addItem(e)}>\r\n                <input autoFocus type=\"text\" placeholder=\"type something\" value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\nexport default TodoListInput","import React, { useReducer } from 'react'\nimport './App.css';\nimport ListItem from './Components/ListItem'\nimport TodoListInput from './Components/TodoListInput'\n\nexport interface Data  {\n  title: string;\n  id: string;\n}\nexport type Action = \n  | {type: \"add\", payload: { title: string, id: string }}\n  | {type: \"remove\", payload: { title: string, id: string }}\n\nconst ACTIONS = {\n  ADD: \"add\",\n  REMOVE: \"remove\",\n  EDIT: \"edit\"\n}\nconst UpdateList = (state: Data[], action: Action): Data[] => {\n  switch (action.type) {\n    case ACTIONS.ADD:\n      return [...state, {title: action.payload.title, id: action.payload.id}]\n    case ACTIONS.REMOVE:\n      return state.filter((item) => action.payload.id !== item.id);\n    case ACTIONS.EDIT:\n      return state\n    default:\n      return state\n  }\n}\nconst App = () => {\n  const [list, dispatch] = useReducer(UpdateList, [])\n  return(\n    <>\n      <TodoListInput dispatch={dispatch}/>\n      {Object.keys(list).length ? <ListItem list={list} dispatch={dispatch} /> : <h1>There's no tasks</h1>}\n    </>\n  )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}